// Autogenerated file - DO NOT EDIT
use crate::PostgresType;

impl PostgresType {

    pub const ACLITEM: PostgresType = PostgresType {
        oid: 1033,
        name: "aclitem",
        element: None,
        is_array: false,
        array_delimiter: ",",
    };

    pub const ACLITEM_ARRAY: PostgresType = PostgresType {
        oid: 1034,
        name: "_aclitem",
        element: Some(&PostgresType::ACLITEM),
        is_array: true,
        array_delimiter: ",",
    };

    pub const ANY: PostgresType = PostgresType {
        oid: 2276,
        name: "any",
        element: None,
        is_array: false,
        array_delimiter: ",",
    };

    pub const ANYARRAY: PostgresType = PostgresType {
        oid: 2277,
        name: "anyarray",
        element: None,
        is_array: false,
        array_delimiter: ",",
    };

    pub const ANYCOMPATIBLE: PostgresType = PostgresType {
        oid: 5077,
        name: "anycompatible",
        element: None,
        is_array: false,
        array_delimiter: ",",
    };

    pub const ANYCOMPATIBLEARRAY: PostgresType = PostgresType {
        oid: 5078,
        name: "anycompatiblearray",
        element: None,
        is_array: false,
        array_delimiter: ",",
    };

    pub const ANYCOMPATIBLEMULTIRANGE: PostgresType = PostgresType {
        oid: 4538,
        name: "anycompatiblemultirange",
        element: None,
        is_array: false,
        array_delimiter: ",",
    };

    pub const ANYCOMPATIBLENONARRAY: PostgresType = PostgresType {
        oid: 5079,
        name: "anycompatiblenonarray",
        element: None,
        is_array: false,
        array_delimiter: ",",
    };

    pub const ANYCOMPATIBLERANGE: PostgresType = PostgresType {
        oid: 5080,
        name: "anycompatiblerange",
        element: None,
        is_array: false,
        array_delimiter: ",",
    };

    pub const ANYELEMENT: PostgresType = PostgresType {
        oid: 2283,
        name: "anyelement",
        element: None,
        is_array: false,
        array_delimiter: ",",
    };

    pub const ANYENUM: PostgresType = PostgresType {
        oid: 3500,
        name: "anyenum",
        element: None,
        is_array: false,
        array_delimiter: ",",
    };

    pub const ANYMULTIRANGE: PostgresType = PostgresType {
        oid: 4537,
        name: "anymultirange",
        element: None,
        is_array: false,
        array_delimiter: ",",
    };

    pub const ANYNONARRAY: PostgresType = PostgresType {
        oid: 2776,
        name: "anynonarray",
        element: None,
        is_array: false,
        array_delimiter: ",",
    };

    pub const ANYRANGE: PostgresType = PostgresType {
        oid: 3831,
        name: "anyrange",
        element: None,
        is_array: false,
        array_delimiter: ",",
    };

    pub const BIT: PostgresType = PostgresType {
        oid: 1560,
        name: "bit",
        element: None,
        is_array: false,
        array_delimiter: ",",
    };

    pub const BIT_ARRAY: PostgresType = PostgresType {
        oid: 1561,
        name: "_bit",
        element: Some(&PostgresType::BIT),
        is_array: true,
        array_delimiter: ",",
    };

    pub const BOOL: PostgresType = PostgresType {
        oid: 16,
        name: "bool",
        element: None,
        is_array: false,
        array_delimiter: ",",
    };

    pub const BOOL_ARRAY: PostgresType = PostgresType {
        oid: 1000,
        name: "_bool",
        element: Some(&PostgresType::BOOL),
        is_array: true,
        array_delimiter: ",",
    };

    pub const BOX: PostgresType = PostgresType {
        oid: 603,
        name: "box",
        element: Some(&PostgresType::POINT),
        is_array: false,
        array_delimiter: ";",
    };

    pub const BOX_ARRAY: PostgresType = PostgresType {
        oid: 1020,
        name: "_box",
        element: Some(&PostgresType::BOX),
        is_array: true,
        array_delimiter: ";",
    };

    pub const BPCHAR: PostgresType = PostgresType {
        oid: 1042,
        name: "bpchar",
        element: None,
        is_array: false,
        array_delimiter: ",",
    };

    pub const BPCHAR_ARRAY: PostgresType = PostgresType {
        oid: 1014,
        name: "_bpchar",
        element: Some(&PostgresType::BPCHAR),
        is_array: true,
        array_delimiter: ",",
    };

    pub const BYTEA: PostgresType = PostgresType {
        oid: 17,
        name: "bytea",
        element: None,
        is_array: false,
        array_delimiter: ",",
    };

    pub const BYTEA_ARRAY: PostgresType = PostgresType {
        oid: 1001,
        name: "_bytea",
        element: Some(&PostgresType::BYTEA),
        is_array: true,
        array_delimiter: ",",
    };

    pub const CHAR: PostgresType = PostgresType {
        oid: 18,
        name: "char",
        element: None,
        is_array: false,
        array_delimiter: ",",
    };

    pub const CHAR_ARRAY: PostgresType = PostgresType {
        oid: 1002,
        name: "_char",
        element: Some(&PostgresType::CHAR),
        is_array: true,
        array_delimiter: ",",
    };

    pub const CID: PostgresType = PostgresType {
        oid: 29,
        name: "cid",
        element: None,
        is_array: false,
        array_delimiter: ",",
    };

    pub const CIDR: PostgresType = PostgresType {
        oid: 650,
        name: "cidr",
        element: None,
        is_array: false,
        array_delimiter: ",",
    };

    pub const CIDR_ARRAY: PostgresType = PostgresType {
        oid: 651,
        name: "_cidr",
        element: Some(&PostgresType::CIDR),
        is_array: true,
        array_delimiter: ",",
    };

    pub const CID_ARRAY: PostgresType = PostgresType {
        oid: 1012,
        name: "_cid",
        element: Some(&PostgresType::CID),
        is_array: true,
        array_delimiter: ",",
    };

    pub const CIRCLE: PostgresType = PostgresType {
        oid: 718,
        name: "circle",
        element: None,
        is_array: false,
        array_delimiter: ",",
    };

    pub const CIRCLE_ARRAY: PostgresType = PostgresType {
        oid: 719,
        name: "_circle",
        element: Some(&PostgresType::CIRCLE),
        is_array: true,
        array_delimiter: ",",
    };

    pub const CSTRING: PostgresType = PostgresType {
        oid: 2275,
        name: "cstring",
        element: None,
        is_array: false,
        array_delimiter: ",",
    };

    pub const CSTRING_ARRAY: PostgresType = PostgresType {
        oid: 1263,
        name: "_cstring",
        element: Some(&PostgresType::CSTRING),
        is_array: true,
        array_delimiter: ",",
    };

    pub const DATE: PostgresType = PostgresType {
        oid: 1082,
        name: "date",
        element: None,
        is_array: false,
        array_delimiter: ",",
    };

    pub const DATEMULTIRANGE: PostgresType = PostgresType {
        oid: 4535,
        name: "datemultirange",
        element: None,
        is_array: false,
        array_delimiter: ",",
    };

    pub const DATEMULTIRANGE_ARRAY: PostgresType = PostgresType {
        oid: 6155,
        name: "_datemultirange",
        element: Some(&PostgresType::DATEMULTIRANGE),
        is_array: true,
        array_delimiter: ",",
    };

    pub const DATERANGE: PostgresType = PostgresType {
        oid: 3912,
        name: "daterange",
        element: None,
        is_array: false,
        array_delimiter: ",",
    };

    pub const DATERANGE_ARRAY: PostgresType = PostgresType {
        oid: 3913,
        name: "_daterange",
        element: Some(&PostgresType::DATERANGE),
        is_array: true,
        array_delimiter: ",",
    };

    pub const DATE_ARRAY: PostgresType = PostgresType {
        oid: 1182,
        name: "_date",
        element: Some(&PostgresType::DATE),
        is_array: true,
        array_delimiter: ",",
    };

    pub const EVENT_TRIGGER: PostgresType = PostgresType {
        oid: 3838,
        name: "event_trigger",
        element: None,
        is_array: false,
        array_delimiter: ",",
    };

    pub const FDW_HANDLER: PostgresType = PostgresType {
        oid: 3115,
        name: "fdw_handler",
        element: None,
        is_array: false,
        array_delimiter: ",",
    };

    pub const FLOAT4: PostgresType = PostgresType {
        oid: 700,
        name: "float4",
        element: None,
        is_array: false,
        array_delimiter: ",",
    };

    pub const FLOAT4_ARRAY: PostgresType = PostgresType {
        oid: 1021,
        name: "_float4",
        element: Some(&PostgresType::FLOAT4),
        is_array: true,
        array_delimiter: ",",
    };

    pub const FLOAT8: PostgresType = PostgresType {
        oid: 701,
        name: "float8",
        element: None,
        is_array: false,
        array_delimiter: ",",
    };

    pub const FLOAT8_ARRAY: PostgresType = PostgresType {
        oid: 1022,
        name: "_float8",
        element: Some(&PostgresType::FLOAT8),
        is_array: true,
        array_delimiter: ",",
    };

    pub const GTSVECTOR: PostgresType = PostgresType {
        oid: 3642,
        name: "gtsvector",
        element: None,
        is_array: false,
        array_delimiter: ",",
    };

    pub const GTSVECTOR_ARRAY: PostgresType = PostgresType {
        oid: 3644,
        name: "_gtsvector",
        element: Some(&PostgresType::GTSVECTOR),
        is_array: true,
        array_delimiter: ",",
    };

    pub const INDEX_AM_HANDLER: PostgresType = PostgresType {
        oid: 325,
        name: "index_am_handler",
        element: None,
        is_array: false,
        array_delimiter: ",",
    };

    pub const INET: PostgresType = PostgresType {
        oid: 869,
        name: "inet",
        element: None,
        is_array: false,
        array_delimiter: ",",
    };

    pub const INET_ARRAY: PostgresType = PostgresType {
        oid: 1041,
        name: "_inet",
        element: Some(&PostgresType::INET),
        is_array: true,
        array_delimiter: ",",
    };

    pub const INT2: PostgresType = PostgresType {
        oid: 21,
        name: "int2",
        element: None,
        is_array: false,
        array_delimiter: ",",
    };

    pub const INT2VECTOR: PostgresType = PostgresType {
        oid: 22,
        name: "int2vector",
        element: Some(&PostgresType::INT2),
        is_array: false,
        array_delimiter: ",",
    };

    pub const INT2VECTOR_ARRAY: PostgresType = PostgresType {
        oid: 1006,
        name: "_int2vector",
        element: Some(&PostgresType::INT2VECTOR),
        is_array: true,
        array_delimiter: ",",
    };

    pub const INT2_ARRAY: PostgresType = PostgresType {
        oid: 1005,
        name: "_int2",
        element: Some(&PostgresType::INT2),
        is_array: true,
        array_delimiter: ",",
    };

    pub const INT4: PostgresType = PostgresType {
        oid: 23,
        name: "int4",
        element: None,
        is_array: false,
        array_delimiter: ",",
    };

    pub const INT4MULTIRANGE: PostgresType = PostgresType {
        oid: 4451,
        name: "int4multirange",
        element: None,
        is_array: false,
        array_delimiter: ",",
    };

    pub const INT4MULTIRANGE_ARRAY: PostgresType = PostgresType {
        oid: 6150,
        name: "_int4multirange",
        element: Some(&PostgresType::INT4MULTIRANGE),
        is_array: true,
        array_delimiter: ",",
    };

    pub const INT4RANGE: PostgresType = PostgresType {
        oid: 3904,
        name: "int4range",
        element: None,
        is_array: false,
        array_delimiter: ",",
    };

    pub const INT4RANGE_ARRAY: PostgresType = PostgresType {
        oid: 3905,
        name: "_int4range",
        element: Some(&PostgresType::INT4RANGE),
        is_array: true,
        array_delimiter: ",",
    };

    pub const INT4_ARRAY: PostgresType = PostgresType {
        oid: 1007,
        name: "_int4",
        element: Some(&PostgresType::INT4),
        is_array: true,
        array_delimiter: ",",
    };

    pub const INT8: PostgresType = PostgresType {
        oid: 20,
        name: "int8",
        element: None,
        is_array: false,
        array_delimiter: ",",
    };

    pub const INT8MULTIRANGE: PostgresType = PostgresType {
        oid: 4536,
        name: "int8multirange",
        element: None,
        is_array: false,
        array_delimiter: ",",
    };

    pub const INT8MULTIRANGE_ARRAY: PostgresType = PostgresType {
        oid: 6157,
        name: "_int8multirange",
        element: Some(&PostgresType::INT8MULTIRANGE),
        is_array: true,
        array_delimiter: ",",
    };

    pub const INT8RANGE: PostgresType = PostgresType {
        oid: 3926,
        name: "int8range",
        element: None,
        is_array: false,
        array_delimiter: ",",
    };

    pub const INT8RANGE_ARRAY: PostgresType = PostgresType {
        oid: 3927,
        name: "_int8range",
        element: Some(&PostgresType::INT8RANGE),
        is_array: true,
        array_delimiter: ",",
    };

    pub const INT8_ARRAY: PostgresType = PostgresType {
        oid: 1016,
        name: "_int8",
        element: Some(&PostgresType::INT8),
        is_array: true,
        array_delimiter: ",",
    };

    pub const INTERNAL: PostgresType = PostgresType {
        oid: 2281,
        name: "internal",
        element: None,
        is_array: false,
        array_delimiter: ",",
    };

    pub const INTERVAL: PostgresType = PostgresType {
        oid: 1186,
        name: "interval",
        element: None,
        is_array: false,
        array_delimiter: ",",
    };

    pub const INTERVAL_ARRAY: PostgresType = PostgresType {
        oid: 1187,
        name: "_interval",
        element: Some(&PostgresType::INTERVAL),
        is_array: true,
        array_delimiter: ",",
    };

    pub const JSON: PostgresType = PostgresType {
        oid: 114,
        name: "json",
        element: None,
        is_array: false,
        array_delimiter: ",",
    };

    pub const JSONB: PostgresType = PostgresType {
        oid: 3802,
        name: "jsonb",
        element: None,
        is_array: false,
        array_delimiter: ",",
    };

    pub const JSONB_ARRAY: PostgresType = PostgresType {
        oid: 3807,
        name: "_jsonb",
        element: Some(&PostgresType::JSONB),
        is_array: true,
        array_delimiter: ",",
    };

    pub const JSONPATH: PostgresType = PostgresType {
        oid: 4072,
        name: "jsonpath",
        element: None,
        is_array: false,
        array_delimiter: ",",
    };

    pub const JSONPATH_ARRAY: PostgresType = PostgresType {
        oid: 4073,
        name: "_jsonpath",
        element: Some(&PostgresType::JSONPATH),
        is_array: true,
        array_delimiter: ",",
    };

    pub const JSON_ARRAY: PostgresType = PostgresType {
        oid: 199,
        name: "_json",
        element: Some(&PostgresType::JSON),
        is_array: true,
        array_delimiter: ",",
    };

    pub const LANGUAGE_HANDLER: PostgresType = PostgresType {
        oid: 2280,
        name: "language_handler",
        element: None,
        is_array: false,
        array_delimiter: ",",
    };

    pub const LINE: PostgresType = PostgresType {
        oid: 628,
        name: "line",
        element: Some(&PostgresType::FLOAT8),
        is_array: false,
        array_delimiter: ",",
    };

    pub const LINE_ARRAY: PostgresType = PostgresType {
        oid: 629,
        name: "_line",
        element: Some(&PostgresType::LINE),
        is_array: true,
        array_delimiter: ",",
    };

    pub const LSEG: PostgresType = PostgresType {
        oid: 601,
        name: "lseg",
        element: Some(&PostgresType::POINT),
        is_array: false,
        array_delimiter: ",",
    };

    pub const LSEG_ARRAY: PostgresType = PostgresType {
        oid: 1018,
        name: "_lseg",
        element: Some(&PostgresType::LSEG),
        is_array: true,
        array_delimiter: ",",
    };

    pub const MACADDR: PostgresType = PostgresType {
        oid: 829,
        name: "macaddr",
        element: None,
        is_array: false,
        array_delimiter: ",",
    };

    pub const MACADDR8: PostgresType = PostgresType {
        oid: 774,
        name: "macaddr8",
        element: None,
        is_array: false,
        array_delimiter: ",",
    };

    pub const MACADDR8_ARRAY: PostgresType = PostgresType {
        oid: 775,
        name: "_macaddr8",
        element: Some(&PostgresType::MACADDR8),
        is_array: true,
        array_delimiter: ",",
    };

    pub const MACADDR_ARRAY: PostgresType = PostgresType {
        oid: 1040,
        name: "_macaddr",
        element: Some(&PostgresType::MACADDR),
        is_array: true,
        array_delimiter: ",",
    };

    pub const MONEY: PostgresType = PostgresType {
        oid: 790,
        name: "money",
        element: None,
        is_array: false,
        array_delimiter: ",",
    };

    pub const MONEY_ARRAY: PostgresType = PostgresType {
        oid: 791,
        name: "_money",
        element: Some(&PostgresType::MONEY),
        is_array: true,
        array_delimiter: ",",
    };

    pub const NAME: PostgresType = PostgresType {
        oid: 19,
        name: "name",
        element: Some(&PostgresType::CHAR),
        is_array: false,
        array_delimiter: ",",
    };

    pub const NAME_ARRAY: PostgresType = PostgresType {
        oid: 1003,
        name: "_name",
        element: Some(&PostgresType::NAME),
        is_array: true,
        array_delimiter: ",",
    };

    pub const NUMERIC: PostgresType = PostgresType {
        oid: 1700,
        name: "numeric",
        element: None,
        is_array: false,
        array_delimiter: ",",
    };

    pub const NUMERIC_ARRAY: PostgresType = PostgresType {
        oid: 1231,
        name: "_numeric",
        element: Some(&PostgresType::NUMERIC),
        is_array: true,
        array_delimiter: ",",
    };

    pub const NUMMULTIRANGE: PostgresType = PostgresType {
        oid: 4532,
        name: "nummultirange",
        element: None,
        is_array: false,
        array_delimiter: ",",
    };

    pub const NUMMULTIRANGE_ARRAY: PostgresType = PostgresType {
        oid: 6151,
        name: "_nummultirange",
        element: Some(&PostgresType::NUMMULTIRANGE),
        is_array: true,
        array_delimiter: ",",
    };

    pub const NUMRANGE: PostgresType = PostgresType {
        oid: 3906,
        name: "numrange",
        element: None,
        is_array: false,
        array_delimiter: ",",
    };

    pub const NUMRANGE_ARRAY: PostgresType = PostgresType {
        oid: 3907,
        name: "_numrange",
        element: Some(&PostgresType::NUMRANGE),
        is_array: true,
        array_delimiter: ",",
    };

    pub const OID: PostgresType = PostgresType {
        oid: 26,
        name: "oid",
        element: None,
        is_array: false,
        array_delimiter: ",",
    };

    pub const OIDVECTOR: PostgresType = PostgresType {
        oid: 30,
        name: "oidvector",
        element: Some(&PostgresType::OID),
        is_array: false,
        array_delimiter: ",",
    };

    pub const OIDVECTOR_ARRAY: PostgresType = PostgresType {
        oid: 1013,
        name: "_oidvector",
        element: Some(&PostgresType::OIDVECTOR),
        is_array: true,
        array_delimiter: ",",
    };

    pub const OID_ARRAY: PostgresType = PostgresType {
        oid: 1028,
        name: "_oid",
        element: Some(&PostgresType::OID),
        is_array: true,
        array_delimiter: ",",
    };

    pub const PATH: PostgresType = PostgresType {
        oid: 602,
        name: "path",
        element: None,
        is_array: false,
        array_delimiter: ",",
    };

    pub const PATH_ARRAY: PostgresType = PostgresType {
        oid: 1019,
        name: "_path",
        element: Some(&PostgresType::PATH),
        is_array: true,
        array_delimiter: ",",
    };

    pub const PG_BRIN_BLOOM_SUMMARY: PostgresType = PostgresType {
        oid: 4600,
        name: "pg_brin_bloom_summary",
        element: None,
        is_array: false,
        array_delimiter: ",",
    };

    pub const PG_BRIN_MINMAX_MULTI_SUMMARY: PostgresType = PostgresType {
        oid: 4601,
        name: "pg_brin_minmax_multi_summary",
        element: None,
        is_array: false,
        array_delimiter: ",",
    };

    pub const PG_DDL_COMMAND: PostgresType = PostgresType {
        oid: 32,
        name: "pg_ddl_command",
        element: None,
        is_array: false,
        array_delimiter: ",",
    };

    pub const PG_DEPENDENCIES: PostgresType = PostgresType {
        oid: 3402,
        name: "pg_dependencies",
        element: None,
        is_array: false,
        array_delimiter: ",",
    };

    pub const PG_LSN: PostgresType = PostgresType {
        oid: 3220,
        name: "pg_lsn",
        element: None,
        is_array: false,
        array_delimiter: ",",
    };

    pub const PG_LSN_ARRAY: PostgresType = PostgresType {
        oid: 3221,
        name: "_pg_lsn",
        element: Some(&PostgresType::PG_LSN),
        is_array: true,
        array_delimiter: ",",
    };

    pub const PG_MCV_LIST: PostgresType = PostgresType {
        oid: 5017,
        name: "pg_mcv_list",
        element: None,
        is_array: false,
        array_delimiter: ",",
    };

    pub const PG_NDISTINCT: PostgresType = PostgresType {
        oid: 3361,
        name: "pg_ndistinct",
        element: None,
        is_array: false,
        array_delimiter: ",",
    };

    pub const PG_NODE_TREE: PostgresType = PostgresType {
        oid: 194,
        name: "pg_node_tree",
        element: None,
        is_array: false,
        array_delimiter: ",",
    };

    pub const PG_SNAPSHOT: PostgresType = PostgresType {
        oid: 5038,
        name: "pg_snapshot",
        element: None,
        is_array: false,
        array_delimiter: ",",
    };

    pub const PG_SNAPSHOT_ARRAY: PostgresType = PostgresType {
        oid: 5039,
        name: "_pg_snapshot",
        element: Some(&PostgresType::PG_SNAPSHOT),
        is_array: true,
        array_delimiter: ",",
    };

    pub const POINT: PostgresType = PostgresType {
        oid: 600,
        name: "point",
        element: Some(&PostgresType::FLOAT8),
        is_array: false,
        array_delimiter: ",",
    };

    pub const POINT_ARRAY: PostgresType = PostgresType {
        oid: 1017,
        name: "_point",
        element: Some(&PostgresType::POINT),
        is_array: true,
        array_delimiter: ",",
    };

    pub const POLYGON: PostgresType = PostgresType {
        oid: 604,
        name: "polygon",
        element: None,
        is_array: false,
        array_delimiter: ",",
    };

    pub const POLYGON_ARRAY: PostgresType = PostgresType {
        oid: 1027,
        name: "_polygon",
        element: Some(&PostgresType::POLYGON),
        is_array: true,
        array_delimiter: ",",
    };

    pub const RECORD: PostgresType = PostgresType {
        oid: 2249,
        name: "record",
        element: None,
        is_array: false,
        array_delimiter: ",",
    };

    pub const RECORD_ARRAY: PostgresType = PostgresType {
        oid: 2287,
        name: "_record",
        element: Some(&PostgresType::RECORD),
        is_array: true,
        array_delimiter: ",",
    };

    pub const REFCURSOR: PostgresType = PostgresType {
        oid: 1790,
        name: "refcursor",
        element: None,
        is_array: false,
        array_delimiter: ",",
    };

    pub const REFCURSOR_ARRAY: PostgresType = PostgresType {
        oid: 2201,
        name: "_refcursor",
        element: Some(&PostgresType::REFCURSOR),
        is_array: true,
        array_delimiter: ",",
    };

    pub const REGCLASS: PostgresType = PostgresType {
        oid: 2205,
        name: "regclass",
        element: None,
        is_array: false,
        array_delimiter: ",",
    };

    pub const REGCLASS_ARRAY: PostgresType = PostgresType {
        oid: 2210,
        name: "_regclass",
        element: Some(&PostgresType::REGCLASS),
        is_array: true,
        array_delimiter: ",",
    };

    pub const REGCOLLATION: PostgresType = PostgresType {
        oid: 4191,
        name: "regcollation",
        element: None,
        is_array: false,
        array_delimiter: ",",
    };

    pub const REGCOLLATION_ARRAY: PostgresType = PostgresType {
        oid: 4192,
        name: "_regcollation",
        element: Some(&PostgresType::REGCOLLATION),
        is_array: true,
        array_delimiter: ",",
    };

    pub const REGCONFIG: PostgresType = PostgresType {
        oid: 3734,
        name: "regconfig",
        element: None,
        is_array: false,
        array_delimiter: ",",
    };

    pub const REGCONFIG_ARRAY: PostgresType = PostgresType {
        oid: 3735,
        name: "_regconfig",
        element: Some(&PostgresType::REGCONFIG),
        is_array: true,
        array_delimiter: ",",
    };

    pub const REGDICTIONARY: PostgresType = PostgresType {
        oid: 3769,
        name: "regdictionary",
        element: None,
        is_array: false,
        array_delimiter: ",",
    };

    pub const REGDICTIONARY_ARRAY: PostgresType = PostgresType {
        oid: 3770,
        name: "_regdictionary",
        element: Some(&PostgresType::REGDICTIONARY),
        is_array: true,
        array_delimiter: ",",
    };

    pub const REGNAMESPACE: PostgresType = PostgresType {
        oid: 4089,
        name: "regnamespace",
        element: None,
        is_array: false,
        array_delimiter: ",",
    };

    pub const REGNAMESPACE_ARRAY: PostgresType = PostgresType {
        oid: 4090,
        name: "_regnamespace",
        element: Some(&PostgresType::REGNAMESPACE),
        is_array: true,
        array_delimiter: ",",
    };

    pub const REGOPER: PostgresType = PostgresType {
        oid: 2203,
        name: "regoper",
        element: None,
        is_array: false,
        array_delimiter: ",",
    };

    pub const REGOPERATOR: PostgresType = PostgresType {
        oid: 2204,
        name: "regoperator",
        element: None,
        is_array: false,
        array_delimiter: ",",
    };

    pub const REGOPERATOR_ARRAY: PostgresType = PostgresType {
        oid: 2209,
        name: "_regoperator",
        element: Some(&PostgresType::REGOPERATOR),
        is_array: true,
        array_delimiter: ",",
    };

    pub const REGOPER_ARRAY: PostgresType = PostgresType {
        oid: 2208,
        name: "_regoper",
        element: Some(&PostgresType::REGOPER),
        is_array: true,
        array_delimiter: ",",
    };

    pub const REGPROC: PostgresType = PostgresType {
        oid: 24,
        name: "regproc",
        element: None,
        is_array: false,
        array_delimiter: ",",
    };

    pub const REGPROCEDURE: PostgresType = PostgresType {
        oid: 2202,
        name: "regprocedure",
        element: None,
        is_array: false,
        array_delimiter: ",",
    };

    pub const REGPROCEDURE_ARRAY: PostgresType = PostgresType {
        oid: 2207,
        name: "_regprocedure",
        element: Some(&PostgresType::REGPROCEDURE),
        is_array: true,
        array_delimiter: ",",
    };

    pub const REGPROC_ARRAY: PostgresType = PostgresType {
        oid: 1008,
        name: "_regproc",
        element: Some(&PostgresType::REGPROC),
        is_array: true,
        array_delimiter: ",",
    };

    pub const REGROLE: PostgresType = PostgresType {
        oid: 4096,
        name: "regrole",
        element: None,
        is_array: false,
        array_delimiter: ",",
    };

    pub const REGROLE_ARRAY: PostgresType = PostgresType {
        oid: 4097,
        name: "_regrole",
        element: Some(&PostgresType::REGROLE),
        is_array: true,
        array_delimiter: ",",
    };

    pub const REGTYPE: PostgresType = PostgresType {
        oid: 2206,
        name: "regtype",
        element: None,
        is_array: false,
        array_delimiter: ",",
    };

    pub const REGTYPE_ARRAY: PostgresType = PostgresType {
        oid: 2211,
        name: "_regtype",
        element: Some(&PostgresType::REGTYPE),
        is_array: true,
        array_delimiter: ",",
    };

    pub const TABLE_AM_HANDLER: PostgresType = PostgresType {
        oid: 269,
        name: "table_am_handler",
        element: None,
        is_array: false,
        array_delimiter: ",",
    };

    pub const TEXT: PostgresType = PostgresType {
        oid: 25,
        name: "text",
        element: None,
        is_array: false,
        array_delimiter: ",",
    };

    pub const TEXT_ARRAY: PostgresType = PostgresType {
        oid: 1009,
        name: "_text",
        element: Some(&PostgresType::TEXT),
        is_array: true,
        array_delimiter: ",",
    };

    pub const TID: PostgresType = PostgresType {
        oid: 27,
        name: "tid",
        element: None,
        is_array: false,
        array_delimiter: ",",
    };

    pub const TID_ARRAY: PostgresType = PostgresType {
        oid: 1010,
        name: "_tid",
        element: Some(&PostgresType::TID),
        is_array: true,
        array_delimiter: ",",
    };

    pub const TIME: PostgresType = PostgresType {
        oid: 1083,
        name: "time",
        element: None,
        is_array: false,
        array_delimiter: ",",
    };

    pub const TIMESTAMP: PostgresType = PostgresType {
        oid: 1114,
        name: "timestamp",
        element: None,
        is_array: false,
        array_delimiter: ",",
    };

    pub const TIMESTAMPTZ: PostgresType = PostgresType {
        oid: 1184,
        name: "timestamptz",
        element: None,
        is_array: false,
        array_delimiter: ",",
    };

    pub const TIMESTAMPTZ_ARRAY: PostgresType = PostgresType {
        oid: 1185,
        name: "_timestamptz",
        element: Some(&PostgresType::TIMESTAMPTZ),
        is_array: true,
        array_delimiter: ",",
    };

    pub const TIMESTAMP_ARRAY: PostgresType = PostgresType {
        oid: 1115,
        name: "_timestamp",
        element: Some(&PostgresType::TIMESTAMP),
        is_array: true,
        array_delimiter: ",",
    };

    pub const TIMETZ: PostgresType = PostgresType {
        oid: 1266,
        name: "timetz",
        element: None,
        is_array: false,
        array_delimiter: ",",
    };

    pub const TIMETZ_ARRAY: PostgresType = PostgresType {
        oid: 1270,
        name: "_timetz",
        element: Some(&PostgresType::TIMETZ),
        is_array: true,
        array_delimiter: ",",
    };

    pub const TIME_ARRAY: PostgresType = PostgresType {
        oid: 1183,
        name: "_time",
        element: Some(&PostgresType::TIME),
        is_array: true,
        array_delimiter: ",",
    };

    pub const TRIGGER: PostgresType = PostgresType {
        oid: 2279,
        name: "trigger",
        element: None,
        is_array: false,
        array_delimiter: ",",
    };

    pub const TSMULTIRANGE: PostgresType = PostgresType {
        oid: 4533,
        name: "tsmultirange",
        element: None,
        is_array: false,
        array_delimiter: ",",
    };

    pub const TSMULTIRANGE_ARRAY: PostgresType = PostgresType {
        oid: 6152,
        name: "_tsmultirange",
        element: Some(&PostgresType::TSMULTIRANGE),
        is_array: true,
        array_delimiter: ",",
    };

    pub const TSM_HANDLER: PostgresType = PostgresType {
        oid: 3310,
        name: "tsm_handler",
        element: None,
        is_array: false,
        array_delimiter: ",",
    };

    pub const TSQUERY: PostgresType = PostgresType {
        oid: 3615,
        name: "tsquery",
        element: None,
        is_array: false,
        array_delimiter: ",",
    };

    pub const TSQUERY_ARRAY: PostgresType = PostgresType {
        oid: 3645,
        name: "_tsquery",
        element: Some(&PostgresType::TSQUERY),
        is_array: true,
        array_delimiter: ",",
    };

    pub const TSRANGE: PostgresType = PostgresType {
        oid: 3908,
        name: "tsrange",
        element: None,
        is_array: false,
        array_delimiter: ",",
    };

    pub const TSRANGE_ARRAY: PostgresType = PostgresType {
        oid: 3909,
        name: "_tsrange",
        element: Some(&PostgresType::TSRANGE),
        is_array: true,
        array_delimiter: ",",
    };

    pub const TSTZMULTIRANGE: PostgresType = PostgresType {
        oid: 4534,
        name: "tstzmultirange",
        element: None,
        is_array: false,
        array_delimiter: ",",
    };

    pub const TSTZMULTIRANGE_ARRAY: PostgresType = PostgresType {
        oid: 6153,
        name: "_tstzmultirange",
        element: Some(&PostgresType::TSTZMULTIRANGE),
        is_array: true,
        array_delimiter: ",",
    };

    pub const TSTZRANGE: PostgresType = PostgresType {
        oid: 3910,
        name: "tstzrange",
        element: None,
        is_array: false,
        array_delimiter: ",",
    };

    pub const TSTZRANGE_ARRAY: PostgresType = PostgresType {
        oid: 3911,
        name: "_tstzrange",
        element: Some(&PostgresType::TSTZRANGE),
        is_array: true,
        array_delimiter: ",",
    };

    pub const TSVECTOR: PostgresType = PostgresType {
        oid: 3614,
        name: "tsvector",
        element: None,
        is_array: false,
        array_delimiter: ",",
    };

    pub const TSVECTOR_ARRAY: PostgresType = PostgresType {
        oid: 3643,
        name: "_tsvector",
        element: Some(&PostgresType::TSVECTOR),
        is_array: true,
        array_delimiter: ",",
    };

    pub const TXID_SNAPSHOT: PostgresType = PostgresType {
        oid: 2970,
        name: "txid_snapshot",
        element: None,
        is_array: false,
        array_delimiter: ",",
    };

    pub const TXID_SNAPSHOT_ARRAY: PostgresType = PostgresType {
        oid: 2949,
        name: "_txid_snapshot",
        element: Some(&PostgresType::TXID_SNAPSHOT),
        is_array: true,
        array_delimiter: ",",
    };

    pub const UNKNOWN: PostgresType = PostgresType {
        oid: 705,
        name: "unknown",
        element: None,
        is_array: false,
        array_delimiter: ",",
    };

    pub const UUID: PostgresType = PostgresType {
        oid: 2950,
        name: "uuid",
        element: None,
        is_array: false,
        array_delimiter: ",",
    };

    pub const UUID_ARRAY: PostgresType = PostgresType {
        oid: 2951,
        name: "_uuid",
        element: Some(&PostgresType::UUID),
        is_array: true,
        array_delimiter: ",",
    };

    pub const VARBIT: PostgresType = PostgresType {
        oid: 1562,
        name: "varbit",
        element: None,
        is_array: false,
        array_delimiter: ",",
    };

    pub const VARBIT_ARRAY: PostgresType = PostgresType {
        oid: 1563,
        name: "_varbit",
        element: Some(&PostgresType::VARBIT),
        is_array: true,
        array_delimiter: ",",
    };

    pub const VARCHAR: PostgresType = PostgresType {
        oid: 1043,
        name: "varchar",
        element: None,
        is_array: false,
        array_delimiter: ",",
    };

    pub const VARCHAR_ARRAY: PostgresType = PostgresType {
        oid: 1015,
        name: "_varchar",
        element: Some(&PostgresType::VARCHAR),
        is_array: true,
        array_delimiter: ",",
    };

    pub const VOID: PostgresType = PostgresType {
        oid: 2278,
        name: "void",
        element: None,
        is_array: false,
        array_delimiter: ",",
    };

    pub const XID: PostgresType = PostgresType {
        oid: 28,
        name: "xid",
        element: None,
        is_array: false,
        array_delimiter: ",",
    };

    pub const XID8: PostgresType = PostgresType {
        oid: 5069,
        name: "xid8",
        element: None,
        is_array: false,
        array_delimiter: ",",
    };

    pub const XID8_ARRAY: PostgresType = PostgresType {
        oid: 271,
        name: "_xid8",
        element: Some(&PostgresType::XID8),
        is_array: true,
        array_delimiter: ",",
    };

    pub const XID_ARRAY: PostgresType = PostgresType {
        oid: 1011,
        name: "_xid",
        element: Some(&PostgresType::XID),
        is_array: true,
        array_delimiter: ",",
    };

    pub const XML: PostgresType = PostgresType {
        oid: 142,
        name: "xml",
        element: None,
        is_array: false,
        array_delimiter: ",",
    };

    pub const XML_ARRAY: PostgresType = PostgresType {
        oid: 143,
        name: "_xml",
        element: Some(&PostgresType::XML),
        is_array: true,
        array_delimiter: ",",
    };
    
    pub(crate) fn get_by_oid(oid: i32) -> Option<&'static PostgresType> {
        match oid {
            1033 => Some(&PostgresType::ACLITEM),
            1034 => Some(&PostgresType::ACLITEM_ARRAY),
            2276 => Some(&PostgresType::ANY),
            2277 => Some(&PostgresType::ANYARRAY),
            5077 => Some(&PostgresType::ANYCOMPATIBLE),
            5078 => Some(&PostgresType::ANYCOMPATIBLEARRAY),
            4538 => Some(&PostgresType::ANYCOMPATIBLEMULTIRANGE),
            5079 => Some(&PostgresType::ANYCOMPATIBLENONARRAY),
            5080 => Some(&PostgresType::ANYCOMPATIBLERANGE),
            2283 => Some(&PostgresType::ANYELEMENT),
            3500 => Some(&PostgresType::ANYENUM),
            4537 => Some(&PostgresType::ANYMULTIRANGE),
            2776 => Some(&PostgresType::ANYNONARRAY),
            3831 => Some(&PostgresType::ANYRANGE),
            1560 => Some(&PostgresType::BIT),
            1561 => Some(&PostgresType::BIT_ARRAY),
            16 => Some(&PostgresType::BOOL),
            1000 => Some(&PostgresType::BOOL_ARRAY),
            603 => Some(&PostgresType::BOX),
            1020 => Some(&PostgresType::BOX_ARRAY),
            1042 => Some(&PostgresType::BPCHAR),
            1014 => Some(&PostgresType::BPCHAR_ARRAY),
            17 => Some(&PostgresType::BYTEA),
            1001 => Some(&PostgresType::BYTEA_ARRAY),
            18 => Some(&PostgresType::CHAR),
            1002 => Some(&PostgresType::CHAR_ARRAY),
            29 => Some(&PostgresType::CID),
            650 => Some(&PostgresType::CIDR),
            651 => Some(&PostgresType::CIDR_ARRAY),
            1012 => Some(&PostgresType::CID_ARRAY),
            718 => Some(&PostgresType::CIRCLE),
            719 => Some(&PostgresType::CIRCLE_ARRAY),
            2275 => Some(&PostgresType::CSTRING),
            1263 => Some(&PostgresType::CSTRING_ARRAY),
            1082 => Some(&PostgresType::DATE),
            4535 => Some(&PostgresType::DATEMULTIRANGE),
            6155 => Some(&PostgresType::DATEMULTIRANGE_ARRAY),
            3912 => Some(&PostgresType::DATERANGE),
            3913 => Some(&PostgresType::DATERANGE_ARRAY),
            1182 => Some(&PostgresType::DATE_ARRAY),
            3838 => Some(&PostgresType::EVENT_TRIGGER),
            3115 => Some(&PostgresType::FDW_HANDLER),
            700 => Some(&PostgresType::FLOAT4),
            1021 => Some(&PostgresType::FLOAT4_ARRAY),
            701 => Some(&PostgresType::FLOAT8),
            1022 => Some(&PostgresType::FLOAT8_ARRAY),
            3642 => Some(&PostgresType::GTSVECTOR),
            3644 => Some(&PostgresType::GTSVECTOR_ARRAY),
            325 => Some(&PostgresType::INDEX_AM_HANDLER),
            869 => Some(&PostgresType::INET),
            1041 => Some(&PostgresType::INET_ARRAY),
            21 => Some(&PostgresType::INT2),
            22 => Some(&PostgresType::INT2VECTOR),
            1006 => Some(&PostgresType::INT2VECTOR_ARRAY),
            1005 => Some(&PostgresType::INT2_ARRAY),
            23 => Some(&PostgresType::INT4),
            4451 => Some(&PostgresType::INT4MULTIRANGE),
            6150 => Some(&PostgresType::INT4MULTIRANGE_ARRAY),
            3904 => Some(&PostgresType::INT4RANGE),
            3905 => Some(&PostgresType::INT4RANGE_ARRAY),
            1007 => Some(&PostgresType::INT4_ARRAY),
            20 => Some(&PostgresType::INT8),
            4536 => Some(&PostgresType::INT8MULTIRANGE),
            6157 => Some(&PostgresType::INT8MULTIRANGE_ARRAY),
            3926 => Some(&PostgresType::INT8RANGE),
            3927 => Some(&PostgresType::INT8RANGE_ARRAY),
            1016 => Some(&PostgresType::INT8_ARRAY),
            2281 => Some(&PostgresType::INTERNAL),
            1186 => Some(&PostgresType::INTERVAL),
            1187 => Some(&PostgresType::INTERVAL_ARRAY),
            114 => Some(&PostgresType::JSON),
            3802 => Some(&PostgresType::JSONB),
            3807 => Some(&PostgresType::JSONB_ARRAY),
            4072 => Some(&PostgresType::JSONPATH),
            4073 => Some(&PostgresType::JSONPATH_ARRAY),
            199 => Some(&PostgresType::JSON_ARRAY),
            2280 => Some(&PostgresType::LANGUAGE_HANDLER),
            628 => Some(&PostgresType::LINE),
            629 => Some(&PostgresType::LINE_ARRAY),
            601 => Some(&PostgresType::LSEG),
            1018 => Some(&PostgresType::LSEG_ARRAY),
            829 => Some(&PostgresType::MACADDR),
            774 => Some(&PostgresType::MACADDR8),
            775 => Some(&PostgresType::MACADDR8_ARRAY),
            1040 => Some(&PostgresType::MACADDR_ARRAY),
            790 => Some(&PostgresType::MONEY),
            791 => Some(&PostgresType::MONEY_ARRAY),
            19 => Some(&PostgresType::NAME),
            1003 => Some(&PostgresType::NAME_ARRAY),
            1700 => Some(&PostgresType::NUMERIC),
            1231 => Some(&PostgresType::NUMERIC_ARRAY),
            4532 => Some(&PostgresType::NUMMULTIRANGE),
            6151 => Some(&PostgresType::NUMMULTIRANGE_ARRAY),
            3906 => Some(&PostgresType::NUMRANGE),
            3907 => Some(&PostgresType::NUMRANGE_ARRAY),
            26 => Some(&PostgresType::OID),
            30 => Some(&PostgresType::OIDVECTOR),
            1013 => Some(&PostgresType::OIDVECTOR_ARRAY),
            1028 => Some(&PostgresType::OID_ARRAY),
            602 => Some(&PostgresType::PATH),
            1019 => Some(&PostgresType::PATH_ARRAY),
            4600 => Some(&PostgresType::PG_BRIN_BLOOM_SUMMARY),
            4601 => Some(&PostgresType::PG_BRIN_MINMAX_MULTI_SUMMARY),
            32 => Some(&PostgresType::PG_DDL_COMMAND),
            3402 => Some(&PostgresType::PG_DEPENDENCIES),
            3220 => Some(&PostgresType::PG_LSN),
            3221 => Some(&PostgresType::PG_LSN_ARRAY),
            5017 => Some(&PostgresType::PG_MCV_LIST),
            3361 => Some(&PostgresType::PG_NDISTINCT),
            194 => Some(&PostgresType::PG_NODE_TREE),
            5038 => Some(&PostgresType::PG_SNAPSHOT),
            5039 => Some(&PostgresType::PG_SNAPSHOT_ARRAY),
            600 => Some(&PostgresType::POINT),
            1017 => Some(&PostgresType::POINT_ARRAY),
            604 => Some(&PostgresType::POLYGON),
            1027 => Some(&PostgresType::POLYGON_ARRAY),
            2249 => Some(&PostgresType::RECORD),
            2287 => Some(&PostgresType::RECORD_ARRAY),
            1790 => Some(&PostgresType::REFCURSOR),
            2201 => Some(&PostgresType::REFCURSOR_ARRAY),
            2205 => Some(&PostgresType::REGCLASS),
            2210 => Some(&PostgresType::REGCLASS_ARRAY),
            4191 => Some(&PostgresType::REGCOLLATION),
            4192 => Some(&PostgresType::REGCOLLATION_ARRAY),
            3734 => Some(&PostgresType::REGCONFIG),
            3735 => Some(&PostgresType::REGCONFIG_ARRAY),
            3769 => Some(&PostgresType::REGDICTIONARY),
            3770 => Some(&PostgresType::REGDICTIONARY_ARRAY),
            4089 => Some(&PostgresType::REGNAMESPACE),
            4090 => Some(&PostgresType::REGNAMESPACE_ARRAY),
            2203 => Some(&PostgresType::REGOPER),
            2204 => Some(&PostgresType::REGOPERATOR),
            2209 => Some(&PostgresType::REGOPERATOR_ARRAY),
            2208 => Some(&PostgresType::REGOPER_ARRAY),
            24 => Some(&PostgresType::REGPROC),
            2202 => Some(&PostgresType::REGPROCEDURE),
            2207 => Some(&PostgresType::REGPROCEDURE_ARRAY),
            1008 => Some(&PostgresType::REGPROC_ARRAY),
            4096 => Some(&PostgresType::REGROLE),
            4097 => Some(&PostgresType::REGROLE_ARRAY),
            2206 => Some(&PostgresType::REGTYPE),
            2211 => Some(&PostgresType::REGTYPE_ARRAY),
            269 => Some(&PostgresType::TABLE_AM_HANDLER),
            25 => Some(&PostgresType::TEXT),
            1009 => Some(&PostgresType::TEXT_ARRAY),
            27 => Some(&PostgresType::TID),
            1010 => Some(&PostgresType::TID_ARRAY),
            1083 => Some(&PostgresType::TIME),
            1114 => Some(&PostgresType::TIMESTAMP),
            1184 => Some(&PostgresType::TIMESTAMPTZ),
            1185 => Some(&PostgresType::TIMESTAMPTZ_ARRAY),
            1115 => Some(&PostgresType::TIMESTAMP_ARRAY),
            1266 => Some(&PostgresType::TIMETZ),
            1270 => Some(&PostgresType::TIMETZ_ARRAY),
            1183 => Some(&PostgresType::TIME_ARRAY),
            2279 => Some(&PostgresType::TRIGGER),
            4533 => Some(&PostgresType::TSMULTIRANGE),
            6152 => Some(&PostgresType::TSMULTIRANGE_ARRAY),
            3310 => Some(&PostgresType::TSM_HANDLER),
            3615 => Some(&PostgresType::TSQUERY),
            3645 => Some(&PostgresType::TSQUERY_ARRAY),
            3908 => Some(&PostgresType::TSRANGE),
            3909 => Some(&PostgresType::TSRANGE_ARRAY),
            4534 => Some(&PostgresType::TSTZMULTIRANGE),
            6153 => Some(&PostgresType::TSTZMULTIRANGE_ARRAY),
            3910 => Some(&PostgresType::TSTZRANGE),
            3911 => Some(&PostgresType::TSTZRANGE_ARRAY),
            3614 => Some(&PostgresType::TSVECTOR),
            3643 => Some(&PostgresType::TSVECTOR_ARRAY),
            2970 => Some(&PostgresType::TXID_SNAPSHOT),
            2949 => Some(&PostgresType::TXID_SNAPSHOT_ARRAY),
            705 => Some(&PostgresType::UNKNOWN),
            2950 => Some(&PostgresType::UUID),
            2951 => Some(&PostgresType::UUID_ARRAY),
            1562 => Some(&PostgresType::VARBIT),
            1563 => Some(&PostgresType::VARBIT_ARRAY),
            1043 => Some(&PostgresType::VARCHAR),
            1015 => Some(&PostgresType::VARCHAR_ARRAY),
            2278 => Some(&PostgresType::VOID),
            28 => Some(&PostgresType::XID),
            5069 => Some(&PostgresType::XID8),
            271 => Some(&PostgresType::XID8_ARRAY),
            1011 => Some(&PostgresType::XID_ARRAY),
            142 => Some(&PostgresType::XML),
            143 => Some(&PostgresType::XML_ARRAY),
            _ => None,
        }
    }
}
