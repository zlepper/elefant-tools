name: Build and test

on:
  push:
  pull_request:

env:
  CARGO_TERM_COLOR: always
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - uses: Swatinem/rust-cache@v2
      name: Cache dependencies
    
    - name: Build
      run: cargo build

    - uses: isbang/compose-action@v2.0.0
      with:
        compose-file: "./docker-compose.yaml"
        compose-flags: "--progress quiet"

    - name: Run tests
      run: cargo test

    - name: Run clippy
      if: always()
      run: |
        cargo clippy -- -D warnings
        cargo clippy --all-targets --all-features -- -D warnings

  build-for-linux:
    name: Build for linux
    runs-on: ubuntu-latest
    needs:
      - test
    steps:
    - uses: actions/checkout@v4

    - uses: Swatinem/rust-cache@v2
      name: Cache dependencies

    - name: Build executable
      run: cargo build --release --package=elefant-sync

    - name: Upload executable
      uses: actions/upload-artifact@v4
      with:
        name: elefant-sync-linux-amd64
        path: target/release/elefant-sync

  build-for-docker:
    name: Build for Docker
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: read
      id-token: write
    steps:
    - run: |
        apt-get update && apt-get install -y --no-install-recommends musl-tools
        rustup target add x86_64-unknown-linux-musl

    - uses: actions/checkout@v4

    - uses: Swatinem/rust-cache@v2
      name: Cache dependencies

    - name: Build executable
      run: | 
        cargo build --release --package=elefant-sync --target x86_64-unknown-linux-musl
        cp target/x86_64-unknown-linux-musl/release/elefant-sync elefant-sync

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Login to Docker
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Docker meta
      id: meta
      uses: docker/metadata-action@v5
      with:
        # list of Docker images to use as base name for tags
        images: |
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        # generate Docker tags based on the following events/attributes
        tags: |
          type=schedule
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          type=sha

    - name: Build and push
      uses: docker/build-push-action@v5
      with:
        context: .
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  build-for-windows:
    name: Build for windows
    runs-on: windows-latest
    needs:
      - test
    steps:
    - uses: actions/checkout@v4

    - uses: Swatinem/rust-cache@v2
      name: Cache dependencies

    - name: Build executable
      run: cargo build --release --package=elefant-sync

    - name: Upload executable
      uses: actions/upload-artifact@v4
      with:
        name: elefant-sync-windows-amd64
        path: target/release/elefant-sync.exe


  benchmark:
    name: Benchmark
    runs-on: ubuntu-latest
    needs:
      - test
    steps:
      - uses: actions/checkout@v4
        with:
          lfs: true

      - uses: Swatinem/rust-cache@v2
        name: Cache dependencies
        with:
          cache-all-crates: true

      - name: Install dependencies
        run: |
          cargo install hyperfine
          sudo sh -c 'echo "deb https://apt.postgresql.org/pub/repos/apt $(lsb_release -cs)-pgdg main" > /etc/apt/sources.list.d/pgdg.list'
          wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | sudo apt-key add -
          sudo apt-get update
          sudo apt-get -y install postgresql-client-15

      - name: Run benchmarks
        run: |
          chmod +x ./benchmarks/*.sh
          ./benchmarks/run_benchmarks.sh
        env:
          ELEFANT_SYNC_PATH: target/release/elefant-sync

      - name: Upload benchmark results
        run: |
          printf "# Exporting as sql\n" >> $GITHUB_STEP_SUMMARY
          cat ./benchmarks/results/export-as-sql.md >> $GITHUB_STEP_SUMMARY
          printf "\n\n# Importing from sql\n" >> $GITHUB_STEP_SUMMARY
          cat ./benchmarks/results/import-from-sql.md >> $GITHUB_STEP_SUMMARY
          printf "\n\n# Copying between databases\n" >> $GITHUB_STEP_SUMMARY
          cat ./benchmarks/results/sync-between-databases.md >> $GITHUB_STEP_SUMMARY
